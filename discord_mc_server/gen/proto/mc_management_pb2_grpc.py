# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mc_management_pb2 as mc__management__pb2


class MCManagementStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPlayerCount = channel.unary_unary(
                '/MCManagement/GetPlayerCount',
                request_serializer=mc__management__pb2.GetPlayerCountRequest.SerializeToString,
                response_deserializer=mc__management__pb2.GetPlayerCountResponse.FromString,
                )
        self.SubscribePlayerCount = channel.unary_stream(
                '/MCManagement/SubscribePlayerCount',
                request_serializer=mc__management__pb2.SubscribePlayerCountRequest.SerializeToString,
                response_deserializer=mc__management__pb2.SubscribePlayerCountResponse.FromString,
                )
        self.UpdateWhitelist = channel.unary_unary(
                '/MCManagement/UpdateWhitelist',
                request_serializer=mc__management__pb2.UpdateWhitelistRequest.SerializeToString,
                response_deserializer=mc__management__pb2.UpdateWhitelistResponse.FromString,
                )
        self.SubscribePlayerEvent = channel.unary_stream(
                '/MCManagement/SubscribePlayerEvent',
                request_serializer=mc__management__pb2.SubscribePlayerEventRequest.SerializeToString,
                response_deserializer=mc__management__pb2.SubscribePlayerEventResponse.FromString,
                )
        self.GetResourceConsumption = channel.unary_unary(
                '/MCManagement/GetResourceConsumption',
                request_serializer=mc__management__pb2.GetResourceConsumptionRequest.SerializeToString,
                response_deserializer=mc__management__pb2.GetResourceConsumptionResponse.FromString,
                )
        self.SubscribeResourceConsumptionEvent = channel.unary_stream(
                '/MCManagement/SubscribeResourceConsumptionEvent',
                request_serializer=mc__management__pb2.SubscribeResourceConsumptionEventRequest.SerializeToString,
                response_deserializer=mc__management__pb2.SubscribeResourceConsumptionEventReponse.FromString,
                )
        self.SubscribeHeartbeat = channel.unary_stream(
                '/MCManagement/SubscribeHeartbeat',
                request_serializer=mc__management__pb2.SubscribeHeartbeatRequest.SerializeToString,
                response_deserializer=mc__management__pb2.SubscribeHeartbeatResponse.FromString,
                )


class MCManagementServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPlayerCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribePlayerCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWhitelist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribePlayerEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResourceConsumption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeResourceConsumptionEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MCManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPlayerCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlayerCount,
                    request_deserializer=mc__management__pb2.GetPlayerCountRequest.FromString,
                    response_serializer=mc__management__pb2.GetPlayerCountResponse.SerializeToString,
            ),
            'SubscribePlayerCount': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribePlayerCount,
                    request_deserializer=mc__management__pb2.SubscribePlayerCountRequest.FromString,
                    response_serializer=mc__management__pb2.SubscribePlayerCountResponse.SerializeToString,
            ),
            'UpdateWhitelist': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWhitelist,
                    request_deserializer=mc__management__pb2.UpdateWhitelistRequest.FromString,
                    response_serializer=mc__management__pb2.UpdateWhitelistResponse.SerializeToString,
            ),
            'SubscribePlayerEvent': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribePlayerEvent,
                    request_deserializer=mc__management__pb2.SubscribePlayerEventRequest.FromString,
                    response_serializer=mc__management__pb2.SubscribePlayerEventResponse.SerializeToString,
            ),
            'GetResourceConsumption': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResourceConsumption,
                    request_deserializer=mc__management__pb2.GetResourceConsumptionRequest.FromString,
                    response_serializer=mc__management__pb2.GetResourceConsumptionResponse.SerializeToString,
            ),
            'SubscribeResourceConsumptionEvent': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeResourceConsumptionEvent,
                    request_deserializer=mc__management__pb2.SubscribeResourceConsumptionEventRequest.FromString,
                    response_serializer=mc__management__pb2.SubscribeResourceConsumptionEventReponse.SerializeToString,
            ),
            'SubscribeHeartbeat': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeHeartbeat,
                    request_deserializer=mc__management__pb2.SubscribeHeartbeatRequest.FromString,
                    response_serializer=mc__management__pb2.SubscribeHeartbeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MCManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MCManagement(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPlayerCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MCManagement/GetPlayerCount',
            mc__management__pb2.GetPlayerCountRequest.SerializeToString,
            mc__management__pb2.GetPlayerCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribePlayerCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MCManagement/SubscribePlayerCount',
            mc__management__pb2.SubscribePlayerCountRequest.SerializeToString,
            mc__management__pb2.SubscribePlayerCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateWhitelist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MCManagement/UpdateWhitelist',
            mc__management__pb2.UpdateWhitelistRequest.SerializeToString,
            mc__management__pb2.UpdateWhitelistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribePlayerEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MCManagement/SubscribePlayerEvent',
            mc__management__pb2.SubscribePlayerEventRequest.SerializeToString,
            mc__management__pb2.SubscribePlayerEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResourceConsumption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MCManagement/GetResourceConsumption',
            mc__management__pb2.GetResourceConsumptionRequest.SerializeToString,
            mc__management__pb2.GetResourceConsumptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeResourceConsumptionEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MCManagement/SubscribeResourceConsumptionEvent',
            mc__management__pb2.SubscribeResourceConsumptionEventRequest.SerializeToString,
            mc__management__pb2.SubscribeResourceConsumptionEventReponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MCManagement/SubscribeHeartbeat',
            mc__management__pb2.SubscribeHeartbeatRequest.SerializeToString,
            mc__management__pb2.SubscribeHeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
